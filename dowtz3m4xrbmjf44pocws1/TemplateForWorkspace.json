{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "dowtz3m4xrbmjf44pocws1"
		},
		"TripFaresSynapseAnalyticsLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'TripFaresSynapseAnalyticsLinkedService'"
		},
		"LS_sasampledata_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_sasampledata'"
		},
		"HttpServerTripDataLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/Azure/Test-Drive-Azure-Synapse-with-a-1-click-POC/main/tripDataAndFaresCSV/trip-data.csv"
		},
		"HttpServerTripFareDataLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/Azure/Test-Drive-Azure-Synapse-with-a-1-click-POC/main/tripDataAndFaresCSV/fares-data.csv"
		},
		"TripFaresDataLakeStorageLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('https://',linkedService().datalakeAccountName,'.dfs.core.windows.net')}"
		},
		"keyVaultLinkedservice_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{concat('https://',linkedService().keyVaultName,'.vault.azure.net/')}"
		},
		"LS_sasampledata_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sasampledata.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/TripFaresDataPipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "IngestTripDataIntoADLS",
						"description": "Copies the trip data csv file from the git repo and loads it into the ADLS.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "tripsDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tripDataSink",
								"type": "DatasetReference",
								"parameters": {
									"datalakeAccountName": {
										"value": "@pipeline().parameters.datalakeAccountName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "IngestTripFaresDataIntoADLS",
						"description": "Copies the trip fare data csv file from the git repo and loads it into the ADLS.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "faresDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "faresDataSink",
								"type": "DatasetReference",
								"parameters": {
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"datalakeAccountName": {
										"value": "@pipeline().parameters.datalakeAccountName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "JoinAndAggregateData",
						"description": "Reads the raw data from both CSV files inside the ADLS, performs the desired transformations (inner join and aggregation) and writes the transformed data into the synapse SQL pool.",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Create Schema If Does Not Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "tripFaresDataTransformations",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TripDataCSV": {
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										},
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										}
									},
									"FaresDataCSV": {
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										}
									},
									"SynapseAnalyticsSink": {
										"SchemaName": {
											"value": "@pipeline().parameters.SchemaName",
											"type": "Expression"
										},
										"SynapseWorkspaceName": {
											"value": "@pipeline().parameters.SynapseWorkspaceName",
											"type": "Expression"
										},
										"SQLDedicatedPoolName": {
											"value": "@pipeline().parameters.SQLDedicatedPoolName",
											"type": "Expression"
										},
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"SQLLoginUsername": {
											"value": "@pipeline().parameters.SQLLoginUsername",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Create Schema If Does Not Exists",
						"description": "Creates the schema inside the SQL dedicated pool. Shema name comes from the pipeline parameter 'SchemaName'.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "IngestTripDataIntoADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "IngestTripFaresDataIntoADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '@{pipeline().parameters.SchemaName}')\nBEGIN\nEXEC('CREATE SCHEMA @{pipeline().parameters.SchemaName}')\nselect Count(*) from sys.symmetric_keys;\nEND\nELSE\nBEGIN\n    select Count(*) from sys.symmetric_keys;\nEND",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azureSynapseAnalyticsSchema",
								"type": "DatasetReference",
								"parameters": {
									"SynapseWorkspaceName": {
										"value": "@pipeline().parameters.SynapseWorkspaceName",
										"type": "Expression"
									},
									"SQLDedicatedPoolName": {
										"value": "@pipeline().parameters.SQLDedicatedPoolName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"SQLLoginUsername": {
										"value": "@pipeline().parameters.SQLLoginUsername",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy data Trips Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create Schema If Does Not Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "IF (EXISTS (SELECT *\n  FROM INFORMATION_SCHEMA.TABLES\n  WHERE TABLE_SCHEMA = 'dbo'\n  AND TABLE_NAME = 'TripsData'))\nBEGIN \n   Truncate table TripsData;\nEnd\n",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "TripFaresDataLakeStorageLinkedService",
									"type": "LinkedServiceReference",
									"parameters": {
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										}
									}
								}
							}
						},
						"inputs": [
							{
								"referenceName": "tripsDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsTripsData",
								"type": "DatasetReference",
								"parameters": {
									"SynapseWorkspaceName": {
										"value": "@pipeline().parameters.SynapseWorkspaceName",
										"type": "Expression"
									},
									"SQLDedicatedPoolName": {
										"value": "@pipeline().parameters.SQLDedicatedPoolName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"SQLLoginUsername": {
										"value": "@pipeline().parameters.SQLLoginUsername",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy data Fares Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create Schema If Does Not Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "IF (EXISTS (SELECT *\n  FROM INFORMATION_SCHEMA.TABLES\n  WHERE TABLE_SCHEMA = 'dbo'\n  AND TABLE_NAME = 'FaresData'))\nBEGIN \n   Truncate table FaresData;\nEnd\n",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "TripFaresDataLakeStorageLinkedService",
									"type": "LinkedServiceReference",
									"parameters": {
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										}
									}
								}
							}
						},
						"inputs": [
							{
								"referenceName": "faresDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsFaresData",
								"type": "DatasetReference",
								"parameters": {
									"SynapseWorkspaceName": {
										"value": "@pipeline().parameters.SynapseWorkspaceName",
										"type": "Expression"
									},
									"SQLDedicatedPoolName": {
										"value": "@pipeline().parameters.SQLDedicatedPoolName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"SQLLoginUsername": {
										"value": "@pipeline().parameters.SQLLoginUsername",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SchemaName": {
						"type": "string",
						"defaultValue": "tripFares"
					},
					"SynapseWorkspaceName": {
						"type": "string",
						"defaultValue": "dowtz3m4xrbmjf44pocws1.database.windows.net"
					},
					"SQLDedicatedPoolName": {
						"type": "string",
						"defaultValue": "dowtz3m4xrbmjf44pocws1p1"
					},
					"SQLLoginUsername": {
						"type": "string",
						"defaultValue": "dowadminuser"
					},
					"KeyVaultName": {
						"type": "string",
						"defaultValue": "kvdowtz3m4xrbmjf44poc"
					},
					"datalakeAccountName": {
						"type": "string",
						"defaultValue": "dowtz3m4xrbmjf44poc"
					}
				},
				"folder": {
					"name": "TripFaresDataPipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/tripsDataSource')]",
				"[concat(variables('workspaceId'), '/datasets/tripDataSink')]",
				"[concat(variables('workspaceId'), '/datasets/faresDataSource')]",
				"[concat(variables('workspaceId'), '/datasets/faresDataSink')]",
				"[concat(variables('workspaceId'), '/dataflows/tripFaresDataTransformations')]",
				"[concat(variables('workspaceId'), '/datasets/azureSynapseAnalyticsSchema')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTripsData')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsFaresData')]",
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresDataLakeStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsFaresData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"table": "FaresData"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsTripsData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"table": "TripsData"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azureSynapseAnalyticsSchema')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azureSynapseAnalyticsTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": "AggregateTaxiData"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/faresDataSink')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresDataLakeStorageLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"datalakeAccountName": {
							"value": "@dataset().datalakeAccountName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"keyVaultName": {
						"type": "string",
						"defaultValue": "kvmsft"
					},
					"datalakeAccountName": {
						"type": "string",
						"defaultValue": "adlsmsft"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "fares-data.csv",
						"fileSystem": "public"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": "hack_license",
						"type": "String"
					},
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "payment_type",
						"type": "String"
					},
					{
						"name": "fare_amount",
						"type": "String"
					},
					{
						"name": "surcharge",
						"type": "String"
					},
					{
						"name": "mta_tax",
						"type": "String"
					},
					{
						"name": "tip_amount",
						"type": "String"
					},
					{
						"name": "tolls_amount",
						"type": "String"
					},
					{
						"name": "total_amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresDataLakeStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/faresDataSource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServerTripFareDataLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HttpServerTripFareDataLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tripDataSink')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresDataLakeStorageLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"datalakeAccountName": {
							"value": "@dataset().datalakeAccountName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"datalakeAccountName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "trip-data.csv",
						"fileSystem": "public"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": "hack_license",
						"type": "String"
					},
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "rate_code",
						"type": "String"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "dropoff_datetime",
						"type": "String"
					},
					{
						"name": "passenger_count",
						"type": "String"
					},
					{
						"name": "trip_time_in_secs",
						"type": "String"
					},
					{
						"name": "trip_distance",
						"type": "String"
					},
					{
						"name": "pickup_longitude",
						"type": "String"
					},
					{
						"name": "pickup_latitude",
						"type": "String"
					},
					{
						"name": "dropoff_longitude",
						"type": "String"
					},
					{
						"name": "dropoff_latitude",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresDataLakeStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tripsDataSource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServerTripDataLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HttpServerTripDataLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HttpServerTripDataLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServerTripDataLinkedService_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HttpServerTripFareDataLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServerTripFareDataLinkedService_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIWorkspaceTripsFares')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "44d26021-612d-40cc-9f40-80dd172b5de2",
					"tenantID": "72f988bf-86f1-41af-91ab-2d7cd011db47"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TripFaresDataLakeStorageLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"keyVaultName": {
						"type": "string"
					},
					"datalakeAccountName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('TripFaresDataLakeStorageLinkedService_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "keyVaultLinkedservice",
							"type": "LinkedServiceReference",
							"parameters": {
								"keyVaultName": {
									"value": "@linkedService().keyVaultName",
									"type": "Expression"
								}
							}
						},
						"secretName": "adlsAccessKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/keyVaultLinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TripFaresSynapseAnalyticsLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('TripFaresSynapseAnalyticsLinkedService_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "keyVaultLinkedservice",
							"type": "LinkedServiceReference",
							"parameters": {
								"keyVaultName": {
									"value": "@linkedService().keyVaultName",
									"type": "Expression"
								}
							}
						},
						"secretName": "synapseSqlLoginPassword"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/keyVaultLinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/keyVaultLinkedservice')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"keyVaultName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('keyVaultLinkedservice_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tripFaresDataTransformations')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TripFaresDataFlow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tripDataSink",
								"type": "DatasetReference"
							},
							"name": "TripDataCSV"
						},
						{
							"dataset": {
								"referenceName": "faresDataSink",
								"type": "DatasetReference"
							},
							"name": "FaresDataCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "azureSynapseAnalyticsTable",
								"type": "DatasetReference"
							},
							"name": "SynapseAnalyticsSink"
						}
					],
					"transformations": [
						{
							"name": "AggregateByPaymentType"
						},
						{
							"name": "InnerJoinWithTripFares"
						}
					],
					"script": "source(output(\n\t\tmedallion as string,\n\t\thack_license as string,\n\t\tvendor_id as string,\n\t\trate_code as string,\n\t\tstore_and_fwd_flag as string,\n\t\tpickup_datetime as string,\n\t\tdropoff_datetime as string,\n\t\tpassenger_count as string,\n\t\ttrip_time_in_secs as string,\n\t\ttrip_distance as string,\n\t\tpickup_longitude as string,\n\t\tpickup_latitude as string,\n\t\tdropoff_longitude as string,\n\t\tdropoff_latitude as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> TripDataCSV\nsource(output(\n\t\tmedallion as string,\n\t\thack_license as string,\n\t\tvendor_id as string,\n\t\tpickup_datetime as string,\n\t\tpayment_type as string,\n\t\tfare_amount as string,\n\t\tsurcharge as string,\n\t\tmta_tax as string,\n\t\ttip_amount as string,\n\t\ttolls_amount as string,\n\t\ttotal_amount as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> FaresDataCSV\nInnerJoinWithTripFares aggregate(groupBy(payment_type),\n\taverage_fare = avg(toInteger(total_amount)),\n\t\ttotal_trip_distance = sum(toInteger(trip_distance))) ~> AggregateByPaymentType\nTripDataCSV, FaresDataCSV join(TripDataCSV@medallion == FaresDataCSV@medallion\n\t&& TripDataCSV@hack_license == FaresDataCSV@hack_license\n\t&& TripDataCSV@vendor_id == FaresDataCSV@vendor_id\n\t&& TripDataCSV@pickup_datetime == FaresDataCSV@pickup_datetime,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> InnerJoinWithTripFares\nAggregateByPaymentType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tstaged: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SynapseAnalyticsSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/tripDataSink')]",
				"[concat(variables('workspaceId'), '/datasets/faresDataSink')]",
				"[concat(variables('workspaceId'), '/datasets/azureSynapseAnalyticsTable')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data Exploration and ML Modeling - NYC taxi predict using Spark MLlib')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dowsparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/7e48a1e8-8d3e-4e00-8bc0-098c43f5ace7/resourceGroups/rg-synapse-dow/providers/Microsoft.Synapse/workspaces/dowtz3m4xrbmjf44pocws1/bigDataPools/dowsparkpool",
						"name": "dowsparkpool",
						"type": "Spark",
						"endpoint": "https://dowtz3m4xrbmjf44pocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dowsparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"extraHeader": {},
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"# Predict NYC Taxi Tips using Spark ML and Azure Open Datasets\n",
							"\n",
							"The notebook ingests, visualizes, prepares and then trains a model based on an Open Dataset that tracks NYC Yellow Taxi trips and various attributes around them.\n",
							"The goal is to predict for a given trip whether there will be a tip or not.\n",
							"\n",
							" https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-machine-learning-mllib-notebook\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"import matplotlib.pyplot as plt\n",
							"\n",
							"from pyspark.sql.functions import unix_timestamp\n",
							"\n",
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"from pyspark.ml import Pipeline\n",
							"from pyspark.ml import PipelineModel\n",
							"from pyspark.ml.feature import RFormula\n",
							"from pyspark.ml.feature import OneHotEncoder, StringIndexer, VectorIndexer\n",
							"from pyspark.ml.classification import LogisticRegression\n",
							"from pyspark.mllib.evaluation import BinaryClassificationMetrics\n",
							"from pyspark.ml.evaluation import BinaryClassificationEvaluator"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Ingest Data¶ \n",
							"\n",
							"Get a sample data of nyc yellow taxi to make it faster/easier to evaluate different approaches to prep for the modelling phase later in the notebook."
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"# Import NYC yellow cab data from Azure Open Datasets\n",
							"from azureml.opendatasets import NycTlcYellow\n",
							"\n",
							"from datetime import datetime\n",
							"from dateutil import parser\n",
							"\n",
							"end_date = parser.parse('2018-05-08 00:00:00')\n",
							"start_date = parser.parse('2018-05-01 00:00:00')\n",
							"\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\n",
							"nyc_tlc_df = nyc_tlc.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"#To make development easier, faster and less expensive downsample for now\n",
							"sampled_taxi_df = nyc_tlc_df.sample(True, 0.001, seed=1234)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Exploratory Data Analysis\n",
							"\n",
							"Look at the data and evaluate its suitability for use in a model, do this via some basic charts focussed on tip values and relationships."
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"#The charting package needs a Pandas dataframe or numpy array do the conversion\n",
							"sampled_taxi_pd_df = sampled_taxi_df.toPandas()\n",
							"\n",
							"# Look at tips by amount count histogram\n",
							"ax1 = sampled_taxi_pd_df['tipAmount'].plot(kind='hist', bins=25, facecolor='lightblue')\n",
							"ax1.set_title('Tip amount distribution')\n",
							"ax1.set_xlabel('Tip Amount ($)')\n",
							"ax1.set_ylabel('Counts')\n",
							"plt.suptitle('')\n",
							"plt.show()\n",
							"\n",
							"# How many passengers tip'd by various amounts\n",
							"ax2 = sampled_taxi_pd_df.boxplot(column=['tipAmount'], by=['passengerCount'])\n",
							"ax2.set_title('Tip amount by Passenger count')\n",
							"ax2.set_xlabel('Passenger count') \n",
							"ax2.set_ylabel('Tip Amount ($)')\n",
							"plt.suptitle('')\n",
							"plt.show()\n",
							"\n",
							"# Look at the relationship between fare and tip amounts\n",
							"ax = sampled_taxi_pd_df.plot(kind='scatter', x= 'fareAmount', y = 'tipAmount', c='blue', alpha = 0.10, s=2.5*(sampled_taxi_pd_df['passengerCount']))\n",
							"ax.set_title('Tip amount by Fare amount')\n",
							"ax.set_xlabel('Fare Amount ($)')\n",
							"ax.set_ylabel('Tip Amount ($)')\n",
							"plt.axis([-2, 80, -2, 20])\n",
							"plt.suptitle('')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Data Prep and Featurization\n",
							"\n",
							"It's clear from the visualizations above that there are a bunch of outliers in the data. These will need to be filtered out in addition there are extra variables that are not going to be useful in the model we build at the end.\n",
							"\n",
							"Finally there is a need to create some new (derived) variables that will work better with the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"taxi_df = sampled_taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'rateCodeId', 'passengerCount'\\\n",
							"                                , 'tripDistance', 'tpepPickupDateTime', 'tpepDropoffDateTime'\\\n",
							"                                , date_format('tpepPickupDateTime', 'hh').alias('pickupHour')\\\n",
							"                                , date_format('tpepPickupDateTime', 'EEEE').alias('weekdayString')\\\n",
							"                                , (unix_timestamp(col('tpepDropoffDateTime')) - unix_timestamp(col('tpepPickupDateTime'))).alias('tripTimeSecs')\\\n",
							"                                , (when(col('tipAmount') > 0, 1).otherwise(0)).alias('tipped')\n",
							"                                )\\\n",
							"                        .filter((sampled_taxi_df.passengerCount > 0) & (sampled_taxi_df.passengerCount < 8)\\\n",
							"                                & (sampled_taxi_df.tipAmount >= 0) & (sampled_taxi_df.tipAmount <= 25)\\\n",
							"                                & (sampled_taxi_df.fareAmount >= 1) & (sampled_taxi_df.fareAmount <= 250)\\\n",
							"                                & (sampled_taxi_df.tipAmount < sampled_taxi_df.fareAmount)\\\n",
							"                                & (sampled_taxi_df.tripDistance > 0) & (sampled_taxi_df.tripDistance <= 100)\\\n",
							"                                & (sampled_taxi_df.rateCodeId <= 5)\n",
							"                                & (sampled_taxi_df.paymentType.isin({\"1\", \"2\"}))\n",
							"                                )"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Data Prep and Featurization Part 2\n",
							"\n",
							"Having created new variables its now possible to drop the columns they were derived from so that the dataframe that goes into the model is the smallest in terms of number of variables, that is required.\n",
							"\n",
							"Also create some more features based on new columns from the first round.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"taxi_featurised_df = taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'passengerCount'\\\n",
							"                                                , 'tripDistance', 'weekdayString', 'pickupHour','tripTimeSecs','tipped'\\\n",
							"                                                , when((taxi_df.pickupHour <= 6) | (taxi_df.pickupHour >= 20),\"Night\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 7) & (taxi_df.pickupHour <= 10), \"AMRush\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 11) & (taxi_df.pickupHour <= 15), \"Afternoon\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 16) & (taxi_df.pickupHour <= 19), \"PMRush\")\\\n",
							"                                                .otherwise(0).alias('trafficTimeBins')\n",
							"                                              )\\\n",
							"                                       .filter((taxi_df.tripTimeSecs >= 30) & (taxi_df.tripTimeSecs <= 7200))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Encoding\n",
							"\n",
							"Different ML algorithms support different types of input, for this example Logistic Regression is being used for Binary Classification. This means that any Categorical (string) variables must be converted to numbers.\n",
							"\n",
							"The process is not as simple as a \"map\" style function as the relationship between the numbers can introduce a bias in the resulting model, the approach is to index the variable and then encode using a std approach called One Hot Encoding.\n",
							"\n",
							"This approach requires the encoder to \"learn\"/fit a model over the data in the Spark instance and then transform based on what was learnt.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"# The sample uses an algorithm that only works with numeric features convert them so they can be consumed\n",
							"sI1 = StringIndexer(inputCol=\"trafficTimeBins\", outputCol=\"trafficTimeBinsIndex\"); \n",
							"en1 = OneHotEncoder(dropLast=False, inputCol=\"trafficTimeBinsIndex\", outputCol=\"trafficTimeBinsVec\");\n",
							"sI2 = StringIndexer(inputCol=\"weekdayString\", outputCol=\"weekdayIndex\"); \n",
							"en2 = OneHotEncoder(dropLast=False, inputCol=\"weekdayIndex\", outputCol=\"weekdayVec\");\n",
							"\n",
							"# Create a new dataframe that has had the encodings applied\n",
							"encoded_final_df = Pipeline(stages=[sI1, en1, sI2, en2]).fit(taxi_featurised_df).transform(taxi_featurised_df)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Generation of Testing and Training Data Sets\n",
							"Simple split, 70% for training and 30% for testing the model. Playing with this ratio may result in different models.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"# Decide on the split between training and testing data from the dataframe \n",
							"trainingFraction = 0.7\n",
							"testingFraction = (1-trainingFraction)\n",
							"seed = 1234\n",
							"\n",
							"# Split the dataframe into test and training dataframes\n",
							"train_data_df, test_data_df = encoded_final_df.randomSplit([trainingFraction, testingFraction], seed=seed)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Train the Model\n",
							"\n",
							"Train the Logistic Regression model and then evaluate it using Area under ROC as the metric."
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"## Create a new LR object for the model\n",
							"logReg = LogisticRegression(maxIter=10, regParam=0.3, labelCol = 'tipped')\n",
							"\n",
							"## The formula for the model\n",
							"classFormula = RFormula(formula=\"tipped ~ pickupHour + weekdayVec + passengerCount + tripTimeSecs + tripDistance + fareAmount + paymentType+ trafficTimeBinsVec\")\n",
							"\n",
							"## Undertake training and create an LR model\n",
							"lrModel = Pipeline(stages=[classFormula, logReg]).fit(train_data_df)\n",
							"\n",
							"## Saving the model is optional but its another for of inter session cache\n",
							"datestamp = datetime.now().strftime('%m-%d-%Y-%s');\n",
							"fileName = \"lrModel_\" + datestamp;\n",
							"logRegDirfilename = fileName;\n",
							"lrModel.save(logRegDirfilename)\n",
							"\n",
							"## Predict tip 1/0 (yes/no) on the test dataset, evaluation using AUROC\n",
							"predictions = lrModel.transform(test_data_df)\n",
							"predictionAndLabels = predictions.select(\"label\",\"prediction\").rdd\n",
							"metrics = BinaryClassificationMetrics(predictionAndLabels)\n",
							"print(\"Area under ROC = %s\" % metrics.areaUnderROC)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Evaluate and Visualize\n",
							"\n",
							"Plot the actual curve to develop a better understanding of the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"## Plot the ROC curve, no need for pandas as this uses the modelSummary object\n",
							"modelSummary = lrModel.stages[-1].summary\n",
							"\n",
							"plt.plot([0, 1], [0, 1], 'r--')\n",
							"plt.plot(modelSummary.roc.select('FPR').collect(),\n",
							"         modelSummary.roc.select('TPR').collect())\n",
							"plt.xlabel('False Positive Rate')\n",
							"plt.ylabel('True Positive Rate')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dowtz3m4xrbmjf44pocws1p1')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"restorePointInTime": "0001-01-01T00:00:00",
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_sasampledata')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_sasampledata_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_sasampledata_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BulkLoadScript')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'tripfare' AND O.TYPE = 'U' AND S.NAME = 'dbo')\nCREATE TABLE dbo.tripfare\n\t(\n\t medallion varchar(100),\n\thack_license varchar(100),\n    vendor_id varchar(100),\n    pickup_datetime varchar(100),\n    payment_type varchar(100),\n    fare_amount varchar(100),\n    surcharge varchar(100),\t\n    mta_tax\tvarchar(100),\n    tip_amount varchar(100),\n    tolls_amount varchar(100),\t\n    total_amount varchar(100)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_tripfare\n--AS\n--BEGIN\nCOPY INTO dbo.tripfare\n(medallion 1, hack_license 2, vendor_id 3, pickup_datetime 4, payment_type 5\n, fare_amount 6, surcharge 7, mta_tax 8, tip_amount 9, tolls_amount 10, total_amount 11)\nFROM 'https://sasampledata.dfs.core.windows.net/nyctaxi/source/trip_fare'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,ERRORFILE = 'https://sasampledata.dfs.core.windows.net/nyctaxi/'\n)\n--END\nGO\n\nSELECT TOP 100 * FROM dbo.tripfare\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CreateExternalTable')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "--CREATE DATABASE nyctaxi\n--GO\n\nUSE nyctaxi;\n\nCREATE EXTERNAL DATA SOURCE mysample\nWITH (    LOCATION   = 'https://sasampledata.dfs.core.windows.net/nyctaxi/source/trip_fare'\n)\nGO\n--DROP EXTERNAL FILE FORMAT textdelimited  \nCREATE EXTERNAL FILE FORMAT textdelimited  \nWITH (  \n    FORMAT_TYPE = DELIMITEDTEXT,  \n    FORMAT_OPTIONS (  \n        FIELD_TERMINATOR = ',', \n        FIRST_ROW = 2, \n        USE_TYPE_DEFAULT = True\n          )\n)\nGO\n\nCREATE SCHEMA nyc\nGO\n--DROP EXTERNAL TABLE nyc.tripfare\nCREATE EXTERNAL TABLE nyc.tripfare (medallion varchar(100),\n\thack_license varchar(100),\n    vendor_id varchar(100),\n    pickup_datetime varchar(100),\n    payment_type varchar(100),\n    fare_amount varchar(100),\n    surcharge varchar(100),\t\n    mta_tax\tvarchar(100),\n    tip_amount varchar(100),\n    tolls_amount varchar(100),\t\n    total_amount varchar(100)\n)\nWITH (DATA_SOURCE = mysample, LOCATION = N'*.csv',FILE_FORMAT = textdelimited)\nGO\n\nSELECT TOP 10 * FROM nyc.tripfare",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyctaxi",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pandasudf')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"from pyspark.sql.types import *\n",
							"from pyspark.sql.functions import col, count, rand, collect_list, explode, struct, count, lit\n",
							"from pyspark.sql.functions import pandas_udf, PandasUDFType\n",
							"import pandas as pd"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"df = spark.range(0, 10 * 1000 * 1000).withColumn('id', (col('id') / 10000).cast('integer')).withColumn('v', rand())\n",
							"df.cache()\n",
							"df.count()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"@pandas_udf('double')\n",
							"def plus_one(v: pd.Series) -> pd.Series:\n",
							"    return v + 1\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"df.withColumn('v', plus_one(df.v)).agg(count(col('v'))).show()"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"@pandas_udf(\"double\")\n",
							"def pandas_plus_one(v: pd.Series) -> pd.Series:\n",
							"    return v + 1\n",
							"    \n",
							"df.withColumn('v', pandas_plus_one(df.v)).agg(count(col('v'))).show()"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"p_df = df.toPandas()"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"import pandas as pd\n",
							"from scipy import stats\n",
							"\n",
							"@pandas_udf('double')\n",
							"def cdf(v):\n",
							"    return pd.Series(stats.norm.cdf(v))\n",
							"    \n",
							"df.withColumn('cumulative_probability', cdf(df.v)).agg(count(col('cumulative_probability'))).show()"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"def subtract_mean(pdf: pd.DataFrame) -> pd.DataFrame:\n",
							"    v = pdf.v\n",
							"    return pdf.assign(v=v - v.mean())\n",
							"\n",
							"df.groupby(\"id\").applyInPandas(subtract_mean, schema=df.schema).show()"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"v"
									],
									"values": [
										"id"
									],
									"yLabel": "id",
									"xLabel": "v",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"id\":{\"-0.0026077258866357145\":0,\"-0.0031001998391559926\":0,\"-0.004134091805271689\":0,\"-0.004215712473426114\":0,\"-0.005462741621099054\":0,\"-0.005568491606648518\":0,\"-0.0061853159056250995\":0,\"-0.008594140047742727\":0,\"-0.009296871105811011\":0,\"-0.009879471018239938\":0,\"-0.010207246103229428\":0,\"-0.011461769115284293\":0,\"-0.011655188509854364\":0,\"-0.013295674637669785\":0,\"-0.01705949228994741\":0,\"-0.017074359834167163\":0,\"-0.017333708682512272\":0,\"-0.01867086914350291\":0,\"-0.019307526687786458\":0,\"-0.02041855458315678\":0,\"-0.02103832740863454\":0,\"-0.02146576268383682\":0,\"-0.023101864552156792\":0,\"-0.02407791586957031\":0,\"-0.024503283115931085\":0,\"-0.025334473378316735\":0,\"-0.026072531428557477\":0,\"-0.026124046300464165\":0,\"-0.027239358261036184\":0,\"-0.027428808294932994\":0,\"-0.027957863687445128\":0,\"-0.029911991993998743\":0,\"-0.03280035107658397\":0,\"-0.03342718257036581\":0,\"-0.03706614920285167\":0,\"-0.038269708838101435\":0,\"-0.03899260677834637\":0,\"-0.04110712224897983\":0,\"-0.042507548995922795\":0,\"-0.044323691847610425\":0,\"-0.04552051307820926\":0,\"-0.04629804902652146\":0,\"-0.04652842571201776\":0,\"-0.051947620453226984\":0,\"-0.05527118209073767\":0,\"-0.056237685975115026\":0,\"-0.057617034208822915\":0,\"-0.057938873826287596\":0,\"-0.05828616007619014\":0,\"-0.05957628300504547\":0,\"-0.06121462660160937\":0,\"-0.061754144549484025\":0,\"-0.062051548652708455\":0,\"-0.06265997682353874\":0,\"-0.06285905192580077\":0,\"-0.063645795942185\":0,\"-0.06492996863050737\":0,\"-0.0653363190389018\":0,\"-0.06712979329732005\":0,\"-0.06811629087394322\":0,\"-0.06837623757774969\":0,\"-0.07036396176947624\":0,\"-0.07208005109713889\":0,\"-0.07260434269808336\":0,\"-0.07318717851947443\":0,\"-0.07323678882948537\":0,\"-0.07371044176535357\":0,\"-0.07378978923136947\":0,\"-0.07664180349578698\":0,\"-0.07732932060986752\":0,\"-0.08385781531414938\":0,\"-0.08503594883972965\":0,\"-0.08583244932601919\":0,\"-0.08613555389994487\":0,\"-0.08666189753158626\":0,\"-0.08798269466575159\":0,\"-0.08827404338949751\":0,\"-0.09044368142794412\":0,\"-0.09111007817218497\":0,\"-0.09179457805056868\":0,\"-0.09242094891013752\":0,\"-0.09319717134161931\":0,\"-0.09323383783412242\":0,\"-0.09484893176523412\":0,\"-0.09511620773787377\":0,\"-0.09533537012145299\":0,\"-0.0956440235472582\":0,\"-0.09619343086677601\":0,\"-0.09648013233109687\":0,\"-0.09690044590470825\":0,\"-0.09699935592803643\":0,\"-0.09773799083865309\":0,\"-0.09901748406317012\":0,\"-0.10010941115210925\":0,\"-0.1009127224599824\":0,\"-0.10102206556388249\":0,\"-0.10126510946933753\":0,\"-0.10142734175744406\":0,\"-0.10156655770465983\":0,\"-0.10287876259101325\":0,\"-0.10348234418090452\":0,\"-0.10457134154020253\":0,\"-0.10726735892995376\":0,\"-0.10862703006103991\":0,\"-0.10942734467212056\":0,\"-0.11079771758115853\":0,\"-0.11168125425718878\":0,\"-0.11235607844833462\":0,\"-0.11298601108782758\":0,\"-0.11323720919641533\":0,\"-0.11357338685798046\":0,\"-0.11480323360682188\":0,\"-0.1155708574237242\":0,\"-0.11667568436838249\":0,\"-0.11738707752553501\":0,\"-0.11777485308691782\":0,\"-0.11837407787748888\":0,\"-0.11877369441501373\":0,\"-0.11937000891349281\":0,\"-0.12089828179149209\":0,\"-0.12093157657639098\":0,\"-0.12123430122906265\":0,\"-0.12151900942868865\":0,\"-0.12185571772780635\":0,\"-0.12325651846799057\":0,\"-0.1240189408099075\":0,\"-0.1250506917665033\":0,\"-0.12649046203899217\":0,\"-0.12703679749120433\":0,\"-0.12708248316358461\":0,\"-0.1272756330901499\":0,\"-0.1295420027143639\":0,\"-0.1297411233104797\":0,\"-0.13092860087742886\":0,\"-0.1327285709753161\":0,\"-0.13291537198251557\":0,\"-0.13399995869422643\":0,\"-0.13831390285509526\":0,\"-0.13884604915538268\":0,\"-0.13886010550682415\":0,\"-0.13908051283633882\":0,\"-0.14025446092730331\":0,\"-0.140548631136046\":0,\"-0.14063621916623537\":0,\"-0.14144358754091857\":0,\"-0.1419609814959477\":0,\"-0.14405220544320163\":0,\"-0.14439657369199943\":0,\"-0.1449956295462238\":0,\"-0.14572314211641468\":0,\"-0.14636146406833084\":0,\"-0.14948901869248798\":0,\"-0.1507910537050312\":0,\"-0.1510054123114215\":0,\"-0.15256640862154813\":0,\"-0.15439109522414673\":0,\"-0.1567162118439469\":0,\"-0.15897462298878673\":0,\"-0.16139795329076345\":0,\"-0.1623859278535713\":0,\"-0.16321848290019036\":0,\"-0.16374828776598727\":0,\"-0.1653312298802312\":0,\"-0.16597669886198063\":0,\"-0.16681403562058272\":0,\"-0.16701685277584466\":0,\"-0.16900855568761775\":0,\"-0.16991310126951698\":0,\"-0.17127141946095636\":0,\"-0.17189683203275075\":0,\"-0.17243042532346453\":0,\"-0.17331353029236407\":0,\"-0.17400895027369745\":0,\"-0.17405345079178347\":0,\"-0.1744061627793847\":0,\"-0.1749028065629401\":0,\"-0.17519473538126573\":0,\"-0.1758041522481777\":0,\"-0.17593623121697632\":0,\"-0.17612640252885936\":0,\"-0.17796140396639526\":0,\"-0.1781185835739154\":0,\"-0.18112817849935925\":0,\"-0.18216038582135163\":0,\"-0.18265029927360987\":0,\"-0.18300167243184906\":0,\"-0.18339653675545908\":0,\"-0.1843966535234538\":0,\"-0.18511909439066376\":0,\"-0.18554461284741408\":0,\"-0.1868717384382792\":0,\"-0.18883164258288\":0,\"-0.18934306561278902\":0,\"-0.1911234295749178\":0,\"-0.19127917601811628\":0,\"-0.19245436813166528\":0,\"-0.1927033233637261\":0,\"-0.1933477440386946\":0,\"-0.19547618481597717\":0,\"-0.19641550980709943\":0,\"-0.19698054919421915\":0,\"-0.19757385752775058\":0,\"-0.19764566602320022\":0,\"-0.1978446681842867\":0,\"-0.1984210120609473\":0,\"-0.19893616396558045\":0,\"-0.1992253275118714\":0,\"-0.1997923721858419\":0,\"-0.199961798062269\":0,\"-0.2003815632873458\":0,\"-0.20082092036766874\":0,\"-0.20256548516819728\":0,\"-0.2041009422089355\":0,\"-0.20419696312027935\":0,\"-0.20428090278146227\":0,\"-0.20451391540847896\":0,\"-0.2065852078051591\":0,\"-0.20832757963020865\":0,\"-0.20969180806813514\":0,\"-0.21053190633657404\":0,\"-0.21067055687882053\":0,\"-0.21189322736227467\":0,\"-0.21234852127076276\":0,\"-0.21399065896995006\":0,\"-0.21516382864021488\":0,\"-0.2159159102707513\":0,\"-0.21763635492110311\":0,\"-0.21807544675285295\":0,\"-0.21974081214740449\":0,\"-0.22136831576584526\":0,\"-0.22427567678883942\":0,\"-0.22545723964601794\":0,\"-0.2256688721803639\":0,\"-0.22874534194192697\":0,\"-0.22920505572720695\":0,\"-0.2300753969568381\":0,\"-0.23050625791604618\":0,\"-0.23168555115965428\":0,\"-0.23787197321678955\":0,\"-0.23888556897955238\":0,\"-0.24016063128031484\":0,\"-0.24075880164771601\":0,\"-0.24102990251750467\":0,\"-0.24151153508765488\":0,\"-0.2418369351357672\":0,\"-0.24646496586264455\":0,\"-0.24675701410615836\":0,\"-0.24723666289906432\":0,\"-0.24761996605804937\":0,\"-0.24792912445514248\":0,\"-0.24822172447338708\":0,\"-0.2488125097380669\":0,\"-0.25128623516699267\":0,\"-0.25148082763193913\":0,\"-0.25204507443182744\":0,\"-0.2522789252701674\":0,\"-0.2529671014517414\":0,\"-0.2538296911685085\":0,\"-0.25404003777527273\":0,\"-0.25413859990109344\":0,\"-0.25649976568433375\":0,\"-0.2568910424025044\":0,\"-0.2571323116174431\":0,\"-0.26027620271259866\":0,\"-0.26027985047665925\":0,\"-0.2612840295045207\":0,\"-0.26265260425714554\":0,\"-0.26281255468958964\":0,\"-0.2654996891632446\":0,\"-0.2659709414330844\":0,\"-0.2682482141001272\":0,\"-0.26835679280527347\":0,\"-0.2688087020793415\":0,\"-0.27070623190705434\":0,\"-0.270845261286208\":0,\"-0.27272050621877986\":0,\"-0.2729304560955583\":0,\"-0.2737304344338656\":0,\"-0.2745299120927138\":0,\"-0.2745647997779441\":0,\"-0.2784263442822279\":0,\"-0.2796954189631735\":0,\"-0.28120604639982205\":0,\"-0.2826464721626174\":0,\"-0.2829330025418788\":0,\"-0.28369162561547223\":0,\"-0.2839153600977611\":0,\"-0.28421426318261944\":0,\"-0.28477473725610514\":0,\"-0.284963491446383\":0,\"-0.28725506804951295\":0,\"-0.28879498609874754\":0,\"-0.2901006203764045\":0,\"-0.29042332781366187\":0,\"-0.29221945721036335\":0,\"-0.29386598311447387\":0,\"-0.294551429608632\":0,\"-0.2953626307596051\":0,\"-0.29537476405618457\":0,\"-0.2963284682815943\":0,\"-0.29690665143148887\":0,\"-0.2988413253132698\":0,\"-0.29889710532674507\":0,\"-0.29897861187489716\":0,\"-0.3007143191652366\":0,\"-0.3037128479723872\":0,\"-0.30372341543060943\":0,\"-0.30402347491746373\":0,\"-0.30505902423768094\":0,\"-0.30748375141271933\":0,\"-0.30788232945156446\":0,\"-0.3093301151475836\":0,\"-0.3093522631774648\":0,\"-0.30950282045549016\":0,\"-0.3123405931308907\":0,\"-0.3143500264600343\":0,\"-0.3164177827479484\":0,\"-0.3176890347781114\":0,\"-0.31785645847196786\":0,\"-0.3220502456085703\":0,\"-0.32252106542728964\":0,\"-0.32264293679331657\":0,\"-0.3230293487766971\":0,\"-0.3247427343108005\":0,\"-0.32508226670012363\":0,\"-0.32514213844013473\":0,\"-0.3257771062755579\":0,\"-0.3265137863141643\":0,\"-0.3275721099227773\":0,\"-0.32813269434642334\":0,\"-0.3281722921482537\":0,\"-0.32946377682982786\":0,\"-0.32950841752186033\":0,\"-0.3317941311879957\":0,\"-0.3344437888762555\":0,\"-0.3388549877835587\":0,\"-0.33931912757629523\":0,\"-0.33952919563309125\":0,\"-0.33965436275700234\":0,\"-0.339876681388777\":0,\"-0.3409297579850572\":0,\"-0.3411855748654975\":0,\"-0.34154201972656195\":0,\"-0.34181813364107994\":0,\"-0.3433156378030382\":0,\"-0.3458098213061158\":0,\"-0.34694294433859496\":0,\"-0.3471520983579268\":0,\"-0.3480826403543291\":0,\"-0.3493782385273574\":0,\"-0.34964879759795076\":0,\"-0.35051400516682096\":0,\"-0.3520957655514618\":0,\"-0.35265962561656994\":0,\"-0.3558762295555147\":0,\"-0.3570334513067446\":0,\"-0.35783466187023105\":0,\"-0.3578626752309655\":0,\"-0.35801925766073617\":0,\"-0.3591885337598939\":0,\"-0.35943283396587633\":0,\"-0.35991404724613374\":0,\"-0.36042159510498206\":0,\"-0.3604873153793884\":0,\"-0.3631217966483147\":0,\"-0.3645541042615805\":0,\"-0.36523275011789447\":0,\"-0.36528596843025407\":0,\"-0.3653288224441209\":0,\"-0.3698974323090556\":0,\"-0.36993464491525496\":0,\"-0.3719350108266648\":0,\"-0.37289746239617094\":0,\"-0.373784944229268\":0,\"-0.3750364351392872\":0,\"-0.37539006182315693\":0,\"-0.3758377373760087\":0,\"-0.3772564736325419\":0,\"-0.37807573248657445\":0,\"-0.37983215675814375\":0,\"-0.38004120355696913\":0,\"-0.38133152859823105\":0,\"-0.38170155174385756\":0,\"-0.382236366888421\":0,\"-0.3833463283879397\":0,\"-0.3842656960337014\":0,\"-0.38456338476410523\":0,\"-0.3846322708044463\":0,\"-0.38507689635729303\":0,\"-0.3866567068548372\":0,\"-0.38897598667673305\":0,\"-0.39048995772694006\":0,\"-0.39152396781288124\":0,\"-0.3929740833868953\":0,\"-0.39386820011999624\":0,\"-0.3943787126862994\":0,\"-0.3949119891009538\":0,\"-0.39529018459691945\":0,\"-0.39699514965663796\":0,\"-0.3978299432842811\":0,\"-0.3983888245543168\":0,\"-0.40102434860746095\":0,\"-0.40321422140969654\":0,\"-0.4049717900147034\":0,\"-0.4050290301608761\":0,\"-0.4051050871806132\":0,\"-0.4053741166650553\":0,\"-0.40538714813819987\":0,\"-0.4054451504339589\":0,\"-0.40575216190629915\":0,\"-0.4093213072265105\":0,\"-0.40974939488068096\":0,\"-0.41200874774794416\":0,\"-0.4122175511723698\":0,\"-0.4133898922629715\":0,\"-0.41359335827751775\":0,\"-0.4140250022328513\":0,\"-0.41521714280834243\":0,\"-0.4153722871929937\":0,\"-0.41625202347284596\":0,\"-0.4193329336390337\":0,\"-0.4207129751670642\":0,\"-0.42236252304984756\":0,\"-0.4224777648023861\":0,\"-0.42254312063959687\":0,\"-0.4234412982207074\":0,\"-0.42402305785935623\":0,\"-0.42521155633105967\":0,\"-0.4253223587955042\":0,\"-0.4259394197127466\":0,\"-0.42679394954158023\":0,\"-0.42700108754256405\":0,\"-0.42775933535241917\":0,\"-0.43140135355407283\":0,\"-0.43396978384728957\":0,\"-0.4340007007197324\":0,\"-0.4343450485489442\":0,\"-0.4359043804121183\":0,\"-0.4376780715763664\":0,\"-0.43790171093094576\":0,\"-0.4383906388550225\":0,\"-0.44014723698804814\":0,\"-0.4405585002059955\":0,\"-0.4412786697321096\":0,\"-0.4418906588289224\":0,\"-0.44348750030770945\":0,\"-0.44431950975008094\":0,\"-0.4446942040769848\":0,\"-0.44531250107662745\":0,\"-0.4464247681623543\":0,\"-0.4467467409588004\":0,\"-0.44784862422727234\":0,\"-0.4512597235294915\":0,\"-0.4521785684787256\":0,\"-0.4527872628931797\":0,\"-0.452967313345346\":0,\"-0.4557685645505123\":0,\"-0.4564395805383332\":0,\"-0.46089694967233585\":0,\"-0.4612129926239459\":0,\"-0.461602267474188\":0,\"-0.46162928026198125\":0,\"-0.4618656327317787\":0,\"-0.4637063310531644\":0,\"-0.4639226533073426\":0,\"-0.4653593744800415\":0,\"-0.46611404921298427\":0,\"-0.46723589521789033\":0,\"-0.4696944313708695\":0,\"-0.47250709610235764\":0,\"-0.4730325174268646\":0,\"-0.4756185806104909\":0,\"-0.47570284505666294\":0,\"-0.4763842314051707\":0,\"-0.47810675888924536\":0,\"-0.4783714077180765\":0,\"-0.47869000183429167\":0,\"-0.4792048739079513\":0,\"-0.47930963237675717\":0,\"-0.4805030377003394\":0,\"-0.4827154994718261\":0,\"-0.4865529311035093\":0,\"-0.4879722560160904\":0,\"-0.4882569283333049\":0,\"-0.4883134449790367\":0,\"-0.4884315511721493\":0,\"-0.4901097582642444\":0,\"-0.4901749176727055\":0,\"-0.49389060423306175\":0,\"-0.49441287388929833\":0,\"-0.49782060510661585\":0,\"-0.5001189806509425\":0,\"-0.5013655235426426\":0,\"-0.5014169126198869\":0,\"-0.5022059465885633\":0,\"-0.50224932908561\":0,\"-0.5023015015155217\":0,\"-0.5031000108246293\":0,\"-0.5038989838927077\":0,\"-0.5039100260398606\":0,\"-0.5043760943288087\":0,\"-0.5045689742282249\":0,\"0.002730199158329949\":0,\"0.002949863493442173\":0,\"0.0034144180375415\":0,\"0.0054790643630304725\":0,\"0.006495332976442336\":0,\"0.007354451585454447\":0,\"0.008438933026971407\":0,\"0.009361252833147704\":0,\"0.01135993717139594\":0,\"0.012394172531425607\":0,\"0.012406551505484975\":0,\"0.012645027451240631\":0,\"0.01406631508207945\":0,\"0.014641474247611308\":0,\"0.01538843232039766\":0,\"0.01544332205390142\":0,\"0.01841832907901164\":0,\"0.02106034241526733\":0,\"0.02121542146970934\":0,\"0.025468843582763023\":0,\"0.0260867223053467\":0,\"0.026332033774843167\":0,\"0.02861081255297382\":0,\"0.03014718598218713\":0,\"0.032708616941634405\":0,\"0.033211320086960816\":0,\"0.033220457964938666\":0,\"0.033739741434472004\":0,\"0.03543182451990412\":0,\"0.035930345526550056\":0,\"0.037323803690340496\":0,\"0.037819109742740276\":0,\"0.03785880224149141\":0,\"0.0380910881048282\":0,\"0.038557218748501265\":0,\"0.03876372488154178\":0,\"0.040247673506544235\":0,\"0.0402565548996241\":0,\"0.0407222999608734\":0,\"0.04460260749570488\":0,\"0.04494138248587465\":0,\"0.046420716183581456\":0,\"0.047447920106189034\":0,\"0.04785450465157859\":0,\"0.05161546359932623\":0,\"0.05374439597862679\":0,\"0.05423295500977132\":0,\"0.056977053538024736\":0,\"0.05710556963121838\":0,\"0.05881566384305548\":0,\"0.06048587644785797\":0,\"0.06060910320057422\":0,\"0.06092169527948865\":0,\"0.06235396384025127\":0,\"0.06326776047705285\":0,\"0.06356466335155653\":0,\"0.06371943970455929\":0,\"0.06416940718408304\":0,\"0.06422478463163439\":0,\"0.0648021092922686\":0,\"0.06496641170982298\":0,\"0.06591162304046239\":0,\"0.06636135725055081\":0,\"0.06699721503519585\":0,\"0.06742298473158015\":0,\"0.06878222248235732\":0,\"0.06980253964084104\":0,\"0.07332495547672546\":0,\"0.07504485775126746\":0,\"0.07574774578527732\":0,\"0.07614819878735557\":0,\"0.0761943105116567\":0,\"0.076707290094016\":0,\"0.07717217580743818\":0,\"0.0772539565594288\":0,\"0.07829739566309901\":0,\"0.0786847904151935\":0,\"0.07922614016019858\":0,\"0.08229807064460837\":0,\"0.08324838324553241\":0,\"0.08538148728051653\":0,\"0.08720443058889815\":0,\"0.0891589521897036\":0,\"0.08975570936951183\":0,\"0.0899935726643466\":0,\"0.09014708588101694\":0,\"0.09239085063228392\":0,\"0.09397261593056272\":0,\"0.09526350211303147\":0,\"0.09556754324804939\":0,\"0.0960868193525175\":0,\"0.09647087814258981\":0,\"0.10064605900071855\":0,\"0.10067521660048429\":0,\"0.10123186647570237\":0,\"0.10224301835319527\":0,\"0.10285170965452495\":0,\"0.10522664531292292\":0,\"0.10587779040642786\":0,\"0.10880778382144052\":0,\"0.1089719700189864\":0,\"0.10904564543690243\":0,\"0.10963998419757925\":0,\"0.11054897044618683\":0,\"0.11138915974148778\":0,\"0.11154791288018773\":0,\"0.11291884712351807\":0,\"0.11340206576675049\":0,\"0.11356383066472309\":0,\"0.11395404154541722\":0,\"0.11480816633371016\":0,\"0.11599873516236747\":0,\"0.11617276887378858\":0,\"0.11683441886650603\":0,\"0.11877573344683756\":0,\"0.12000413405730881\":0,\"0.12012848570081225\":0,\"0.12027379631775115\":0,\"0.12402309610982987\":0,\"0.12423776042734236\":0,\"0.12477135486400126\":0,\"0.12552362345294\":0,\"0.12583888150878386\":0,\"0.1277782939214296\":0,\"0.12779390631553356\":0,\"0.12820570161783174\":0,\"0.12837507956688987\":0,\"0.12933855430452046\":0,\"0.13461748347233615\":0,\"0.1349837022058049\":0,\"0.13554018080881947\":0,\"0.13686177828884705\":0,\"0.13844614718273784\":0,\"0.13864225596944535\":0,\"0.1396312793376413\":0,\"0.14083085781577465\":0,\"0.14138628832541156\":0,\"0.14266563850465075\":0,\"0.1427091050800562\":0,\"0.14405061880829062\":0,\"0.1448236945919894\":0,\"0.14495195321846222\":0,\"0.1468690837094777\":0,\"0.14734476034735988\":0,\"0.14739270862287945\":0,\"0.14863775849408278\":0,\"0.14910846983076276\":0,\"0.1509380980404298\":0,\"0.1516200433284276\":0,\"0.15199245390628602\":0,\"0.15209702090656152\":0,\"0.15302842879783762\":0,\"0.15467333473892197\":0,\"0.1548525644693084\":0,\"0.1549623680980321\":0,\"0.15503690119367985\":0,\"0.15524909987868063\":0,\"0.15605334289223172\":0,\"0.157350940342172\":0,\"0.15812769868467824\":0,\"0.15813768196496314\":0,\"0.15886019092454529\":0,\"0.16379860057195716\":0,\"0.16406473068296923\":0,\"0.165467148727086\":0,\"0.16615976151168454\":0,\"0.16663757745617302\":0,\"0.16940131116142831\":0,\"0.16952648601297748\":0,\"0.16998231581865775\":0,\"0.17033872517286253\":0,\"0.17151559207220424\":0,\"0.17192940998176076\":0,\"0.17381852554870125\":0,\"0.17486678453111648\":0,\"0.17614861929064007\":0,\"0.17681970025906435\":0,\"0.17773746130401302\":0,\"0.1788955173927902\":0,\"0.18009699499140264\":0,\"0.18010972915913492\":0,\"0.1801910581160675\":0,\"0.18065693961859464\":0,\"0.18086851983811147\":0,\"0.18147978357648387\":0,\"0.1815385442634574\":0,\"0.1815389300849295\":0,\"0.18234849537732378\":0,\"0.1852871398404461\":0,\"0.18569928305022487\":0,\"0.1869181343588917\":0,\"0.1881638263776182\":0,\"0.18880789349290672\":0,\"0.19037470256043632\":0,\"0.19064770758602068\":0,\"0.1910596960615496\":0,\"0.19108758562705108\":0,\"0.1920039665006854\":0,\"0.19384342967327517\":0,\"0.1943527243102683\":0,\"0.19694876508215908\":0,\"0.19805857314518804\":0,\"0.1981339742660213\":0,\"0.19880558738600262\":0,\"0.19920036636212002\":0,\"0.1993794583105486\":0,\"0.1995629743626952\":0,\"0.19984653038348488\":0,\"0.20066264331646866\":0,\"0.20096721194162148\":0,\"0.20148634957677336\":0,\"0.20340923206648776\":0,\"0.20348696269752953\":0,\"0.2038222321942722\":0,\"0.204147361354718\":0,\"0.20430638655227806\":0,\"0.2057610255843112\":0,\"0.20705426313915876\":0,\"0.20834792882299746\":0,\"0.20928664376534\":0,\"0.20941538839372154\":0,\"0.21263832727322174\":0,\"0.21391386910317123\":0,\"0.21508502197329205\":0,\"0.21585726588304488\":0,\"0.21641390456555532\":0,\"0.2176878172639991\":0,\"0.21776492043528894\":0,\"0.21870398901473087\":0,\"0.2192784403417749\":0,\"0.21946936411396445\":0,\"0.22019562915372104\":0,\"0.2214430878460274\":0,\"0.22183874384949176\":0,\"0.2223179593710929\":0,\"0.22297923745905002\":0,\"0.22435645807991977\":0,\"0.22449778709933788\":0,\"0.22604164008771277\":0,\"0.2274729137128031\":0,\"0.22936976562850298\":0,\"0.2303583947273884\":0,\"0.23120216560921603\":0,\"0.2321816089578579\":0,\"0.2328453148160452\":0,\"0.2337512913943034\":0,\"0.23816433894226452\":0,\"0.23905826167408883\":0,\"0.239370358911702\":0,\"0.2402439075593703\":0,\"0.24102382815204026\":0,\"0.24190708651435044\":0,\"0.24358150729438366\":0,\"0.24371383254497014\":0,\"0.24607914806119235\":0,\"0.2466853789317922\":0,\"0.24675581668635727\":0,\"0.2477182591173528\":0,\"0.2497770834356683\":0,\"0.25003182574410077\":0,\"0.2501700293464475\":0,\"0.2509990500628563\":0,\"0.2515144955979107\":0,\"0.2519831043545466\":0,\"0.25213434752170083\":0,\"0.2530692247744908\":0,\"0.2536487948403534\":0,\"0.26041350765834537\":0,\"0.26172084706400245\":0,\"0.2628237552132444\":0,\"0.2629983974878429\":0,\"0.26448265468454024\":0,\"0.26697017603976736\":0,\"0.268645150369744\":0,\"0.2696101698073605\":0,\"0.27007702900369734\":0,\"0.27029787762150903\":0,\"0.27177065778654774\":0,\"0.2722296183688191\":0,\"0.27751055564664107\":0,\"0.2792321653950103\":0,\"0.28149711894132046\":0,\"0.2819490088761387\":0,\"0.28240496329426223\":0,\"0.2850708476728261\":0,\"0.28804378217707627\":0,\"0.2892278276529705\":0,\"0.2899097117390965\":0,\"0.29502344486511256\":0,\"0.29589657009675485\":0,\"0.29609071962923705\":0,\"0.2966620244869558\":0,\"0.29759057685203594\":0,\"0.2999859419290829\":0,\"0.3025996930201651\":0,\"0.3032956264187907\":0,\"0.3033505704714996\":0,\"0.3035239874699973\":0,\"0.30356460496822213\":0,\"0.3040471935725717\":0,\"0.30425461925065833\":0,\"0.30450526340396333\":0,\"0.3046144197333722\":0,\"0.3057556560852026\":0,\"0.30702689946119044\":0,\"0.307112182181672\":0,\"0.30732674531068294\":0,\"0.3085091273685141\":0,\"0.3092798187865282\":0,\"0.3117521168525186\":0,\"0.3160084304976718\":0,\"0.31700949469735495\":0,\"0.3181410535864384\":0,\"0.31951262796450286\":0,\"0.32016868534206133\":0,\"0.32055226789627045\":0,\"0.32105051315237243\":0,\"0.3219001134388737\":0,\"0.32269214704519555\":0,\"0.32292034237344525\":0,\"0.3233926408973331\":0,\"0.3240833317704166\":0,\"0.32561877349525226\":0,\"0.3256356440686068\":0,\"0.3305622586934043\":0,\"0.33086187147640067\":0,\"0.3314599642726479\":0,\"0.331644277762968\":0,\"0.33209770566050123\":0,\"0.33234697168046945\":0,\"0.33250069229673085\":0,\"0.33333418422242933\":0,\"0.3360416510496631\":0,\"0.33807534483204416\":0,\"0.3382040957034409\":0,\"0.3383583046424372\":0,\"0.33871433860273625\":0,\"0.3398102321560945\":0,\"0.3422975214195554\":0,\"0.3446290987049785\":0,\"0.34466520575271753\":0,\"0.344734578142017\":0,\"0.3454308732321747\":0,\"0.34631941168430025\":0,\"0.3468033390353529\":0,\"0.3470278989735933\":0,\"0.34822290368417463\":0,\"0.34928643949265514\":0,\"0.3505680505401736\":0,\"0.3530705109343213\":0,\"0.35326026532271526\":0,\"0.3537205469071496\":0,\"0.35434551665729375\":0,\"0.3549676450231465\":0,\"0.35589099929466106\":0,\"0.3571744074811398\":0,\"0.3589509327155571\":0,\"0.3595142903938835\":0,\"0.3598483700923254\":0,\"0.36009128549603253\":0,\"0.36162297761134554\":0,\"0.3622020597210105\":0,\"0.3626866778656326\":0,\"0.36289705942371664\":0,\"0.364122961274129\":0,\"0.3644170480652731\":0,\"0.3650094226332554\":0,\"0.3654230650679924\":0,\"0.36591103968269056\":0,\"0.3660407879202119\":0,\"0.36629713361854566\":0,\"0.3664922523833558\":0,\"0.3665186301981873\":0,\"0.36728038623016923\":0,\"0.3686992218238756\":0,\"0.3693755585760239\":0,\"0.3696209689075667\":0,\"0.369852122091044\":0,\"0.3700938649770771\":0,\"0.3711746976567478\":0,\"0.37225207295943075\":0,\"0.37253651000385823\":0,\"0.37471436540373304\":0,\"0.3750193683297858\":0,\"0.37511103443982186\":0,\"0.3755940926018233\":0,\"0.37592759095283435\":0,\"0.3762303958764839\":0,\"0.3777794506409131\":0,\"0.3785651040875877\":0,\"0.3792923733244695\":0,\"0.38067739696508496\":0,\"0.3839624675642854\":0,\"0.384004280691167\":0,\"0.3860985866767217\":0,\"0.38805779259595385\":0,\"0.3881977429493644\":0,\"0.38852505661664805\":0,\"0.3889791643671081\":0,\"0.3894836763969278\":0,\"0.38949105345172463\":0,\"0.3908383934912041\":0,\"0.3932775352164455\":0,\"0.3933940256461721\":0,\"0.39701296829065336\":0,\"0.39817111968919394\":0,\"0.3984188188060711\":0,\"0.39854303410420044\":0,\"0.39879340345726777\":0,\"0.402179362491734\":0,\"0.402680881505759\":0,\"0.40452168142528033\":0,\"0.4046950943354297\":0,\"0.40479871499219366\":0,\"0.40535317081518385\":0,\"0.40557783934145175\":0,\"0.40778327509422696\":0,\"0.4080233639542086\":0,\"0.4081042042273748\":0,\"0.4084624369092895\":0,\"0.4088243343321172\":0,\"0.4096630197236337\":0,\"0.40980601316386456\":0,\"0.41478964796976814\":0,\"0.416281052641702\":0,\"0.41818385862165264\":0,\"0.4182733513635897\":0,\"0.418999982859775\":0,\"0.4201983044397397\":0,\"0.4202371985166826\":0,\"0.4207786790541117\":0,\"0.42119215932994947\":0,\"0.42204225193640377\":0,\"0.4221736606053925\":0,\"0.4229772922258428\":0,\"0.42299953959137926\":0,\"0.42344327044978347\":0,\"0.42421645093555016\":0,\"0.4253652219593038\":0,\"0.4259085978005068\":0,\"0.4267117966348366\":0,\"0.42758159324129763\":0,\"0.42897147554144577\":0,\"0.4295056715614376\":0,\"0.42997166990608116\":0,\"0.4302148482111665\":0,\"0.4302898562938673\":0,\"0.43174027388645797\":0,\"0.43346315608980013\":0,\"0.4347867919825159\":0,\"0.43482046288047127\":0,\"0.435404412537862\":0,\"0.4359573660956897\":0,\"0.4402038518118998\":0,\"0.4411614999546689\":0,\"0.44267705165063687\":0,\"0.44272566058852747\":0,\"0.4453435283135916\":0,\"0.44595320006936023\":0,\"0.44829339590686756\":0,\"0.4496158214542192\":0,\"0.4559838530651641\":0,\"0.4560596866361244\":0,\"0.45656116030182914\":0,\"0.4568207698381823\":0,\"0.45786870606150964\":0,\"0.4588531113398522\":0,\"0.4611633547824159\":0,\"0.4635034864049399\":0,\"0.4647969843696498\":0,\"0.46524042346668626\":0,\"0.46525082993262923\":0,\"0.46544424736217116\":0,\"0.46686617468052183\":0,\"0.468857754563617\":0,\"0.4705022283995832\":0,\"0.4706820012821533\":0,\"0.4709581854023541\":0,\"0.4729690237794377\":0,\"0.4735834547288871\":0,\"0.4750871628648221\":0,\"0.47660133477223066\":0,\"0.47661674831385126\":0,\"0.4798664000130415\":0,\"0.4805071751734755\":0,\"0.48249491631151753\":0,\"0.4831806749046048\":0,\"0.48461420038347236\":0,\"0.48524142983265106\":0,\"0.4879172245466392\":0,\"0.48855865404311083\":0,\"0.48871471498850405\":0,\"0.4889302312730439\":0,\"0.4919576182086236\":0,\"0.493125564510446\":0,\"0.49320484167071377\":0,\"0.49463263293821313\":0,\"1.6953710472900063E-4\":0,\"6.432296733094311E-5\":0}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"display(p_df.groupby(\"id\").apply(subtract_mean))"
						],
						"outputs": [],
						"execution_count": 25
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GrantPermissionToServerless')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "use master\ngo\nCREATE LOGIN [sitandon@microsoft.com] FROM EXTERNAL PROVIDER;\nALTER SERVER ROLE sysadmin ADD MEMBER [sitandon@microsoft.com];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}